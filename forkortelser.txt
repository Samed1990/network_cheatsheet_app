📘 Forkortelser i datakommunikasjon (INFT1007)

 Lenkelaget (Layer 2):
* VLAN - Virtual LAN: Logisk nettverk innenfor fysisk nettverk, skiller trafikk uten ekstra kabler.
* MAC - Media Access Control: Unik fysisk adresse brukt for lokal levering av rammer.
* ARP - Address Resolution Protocol: Oversetter IP-adresser til MAC-adresser.
* LLC - Logical Link Control: Gir grensesnitt mot nettverkslaget og styrer multipleksering.
* PPP - Point-to-Point Protocol: Brukes til direkte forbindelser mellom to noder, ofte i modemforbindelser.
* CSMA/CD - Carrier Sense Multiple Access with Collision Detection: Ethernet-teknikk for å oppdage kollisjoner.
* CSMA/CA - Collision Avoidance: WiFi-teknikk som forsøker å unngå kollisjoner.
🟢 CSMA/CD – brukes i kablet Ethernet
En enhet lytter på linja (Carrier Sense)

Hvis det er stille, begynner den å sende

Hvis to enheter sender samtidig → kollisjon

Kollisjon oppdages, og begge stopper, venter tilfeldig tid og prøver igjen

📌 Brukt i Ethernet med hub (delt medium), ikke lenger aktuelt i moderne svitsjede nettverk

🟡 CSMA/CA – brukes i WiFi
Enhet lytter før sending

Sender ikke umiddelbart – venter først en tilfeldig periode

Sender valgfritt en RTS (Request to Send) – mottaker svarer med CTS (Clear to Send)

Når det er klart, sendes pakken – uten å være sikker på at ingen andre sender samtidig

📌 Brukt i trådløse nettverk, fordi man ikke kan høre mens man sender
I kablet nettverk (Ethernet med svitsj):
👉 CSMA/CD trengs ikke lenger, fordi hver enhet har sitt eget kollisjonsfrie medium (full dupleks).
👉 Moderne Ethernet bypasser hele CSMA/CD.

I trådløse nettverk (WiFi):
👉 CSMA/CA er nødvendig, fordi man ikke kan høre og sende samtidig.
👉 Det forhindrer kollisjoner, som er veldig dyre i trådløse medium.

🧠 Konklusjon:
CSMA/CD var en smart løsning for kabelnett med delt medium, men er i praksis utdatert i dag.

CSMA/CA er mer komplisert, men fortsatt kritisk i moderne WiFi – det gjør det mulig for flere å dele det trådløse mediet uten for mange kollisjoner.

* RTS/CTS - Request To Send / Clear To Send: Kontrollmekanisme i trådløs kommunikasjon for å reservere kanal.
* FCS - Frame Check Sequence: Brukes til å sjekke om rammen er mottatt med feil.
* CRC - Cyclic Redundancy Check: Feildeteksjon brukt i Ethernet-rammer.
* DTP - Dynamic Trunking Protocol: Forhandler trunk-forbindelse mellom svitsjer.
* VTP - VLAN Trunking Protocol: Distribuerer VLAN-konfigurasjon til flere svitsjer.
* STP - Spanning Tree Protocol: Forhindrer løkker i nettverk ved å deaktivere enkelte forbindelser.
* CDP - Cisco Discovery Protocol: Cisco-protokoll for å oppdage andre Cisco-enheter.
* MTU - Maximum Transmission Unit: Maksimalt antall byte som kan sendes i én ramme.

 Nettverkslaget (Layer 3):
* IP - Internet Protocol: Brukes til å adressere og rute pakker mellom nettverk.
* ISP - Internet Service Provider: Tilbyr internettforbindelse og ruter trafikk mot eksterne nett.
* ICMP - Internet Control Message Protocol: Brukes til feilmeldinger og diagnostikk (f.eks. ping).
* BGP - Border Gateway Protocol: Brukes mellom autonome systemer for ruting på Internett.
* OSPF - Open Shortest Path First: Brukes til intern ruting i større nettverk.
* RIP - Routing Information Protocol: Enkel ruteprotokoll basert på hop-count.
* NAT - Network Address Translation: Oversetter mellom private og offentlige IP-adresser.
* PAT - Port Address Translation: Utvider NAT med portnummer for flere samtidige forbindelser.
* ACL - Access Control List: Brukes til å filtrere trafikk basert på IP, port eller protokoll.
* QoS - Quality of Service: Prioriterer trafikk for bedre ytelse for viktige tjenester.
* MPLS - Multiprotocol Label Switching: Ruter pakker basert på etiketter i stedet for IP-adresser.
* DMZ - Demilitarized Zone: Del av nettverk som isolerer offentlige tjenester fra internt nett.

 Transportlaget (Layer 4):
* TCP - Transmission Control Protocol: Pålitelig og ordnet levering av data.
* UDP - User Datagram Protocol: Rask, upålitelig dataoverføring uten forbindelse.
* TLS - Transport Layer Security: Krypteringsprotokoll brukt i HTTPS.
* SSL - Secure Sockets Layer: Eldre krypteringsprotokoll for sikker kommunikasjon.
* ACK - Acknowledgement: Brukes til å bekrefte mottak av data.
* SYN - Synchronize: Første steg i TCPs treveis håndtrykk.
* FIN - Finish: TCP-flagg som avslutter forbindelsen.

 Applikasjonslaget (Layer 7):
* HTTP - HyperText Transfer Protocol: Brukes av nettlesere til å hente nettsider.
* HTTPS - HTTP Secure: Kryptert versjon av HTTP via TLS.
* DNS - Domain Name System: Slår opp domenenavn og returnerer IP-adresser.
* DHCP - Dynamic Host Configuration Protocol: Tildeler automatisk IP-adresser til klienter.
* SMTP - Simple Mail Transfer Protocol: Brukes til å sende e-post.
* POP3 - Post Office Protocol v3: Laster ned e-post fra server til klient.
* IMAP - Internet Message Access Protocol: Gir tilgang til e-post på server uten å laste ned.
* FTP - File Transfer Protocol: Overfører filer mellom klient og tjener.
* TFTP - Trivial File Transfer Protocol: Enkel filoverføring uten pålogging.
* SSID - Service Set Identifier: Navnet på et trådløst nettverk.
* WEP - Wired Equivalent Privacy: Tidlig og svak krypteringsprotokoll for WiFi.
* WPA - Wi-Fi Protected Access: Kryptering for trådløst nettverk.
* WPA2 - Wi-Fi Protected Access v2: Videreutviklet og sikrere enn WPA.
* URL - Uniform Resource Locator: Adressen til en ressurs på internett.
* VoIP - Voice over IP: Tale over IP-nettverk.
* ICANN - Internet Corporation for Assigned Names and Numbers: Administrerer domenenavn og IP-adresser.
* IETF - Internet Engineering Task Force: Utvikler åpne standarder for internett.
* IEEE - Institute of Electrical and Electronics Engineers: Utvikler nettverksstandarder som Ethernet.

 Diverse:
* PDU - Protocol Data Unit: Navn på datapakken på hvert lag i OSI-modellen.
* OSI - Open Systems Interconnection: Standardisert 7-lags kommunikasjonsmodell.
* DSL - Digital Subscriber Line: Internett-teknologi over telefonlinje.


📘 Binære vekter:

Binære vekter, som brukes for å forstå og regne ut nettmaske, antall IP-adresser og antall brukbare adresser i et subnett.

Når vi ser på én oktett i en IP-adresse (f.eks. 255.255.255.0), så kan vi tenke slik:


Bitplass	Binærverdi	Desimalverdi
1. bit	10000000	128
2. bit	01000000	64
3. bit	00100000	32
4. bit	00010000	16
5. bit	00001000	8
6. bit	00000100	4
7. bit	00000010	2
8. bit	00000001	1
Når du setter sammen 1-ere fra venstre og slutter når du kommer til 0-er, får du f.eks.:

11111111 = 255

11111100 = 252

11110000 = 240

11000000 = 192

Dette kalles nettmaskens desimalverdi, og forteller hvor mange biter som er "låst" til nettverk.

🧠 Slik bruker du det i praksis
Eksempel: IP = 192.168.1.0/26
Hva betyr /26?
Det betyr at 26 av 32 biter er nettverksbiter, resten er vertsbiter.
Du har altså 6 biter til host (32 - 26 = 6).

Hvor mange IP-adresser får du?
Formel: 2^antall host-biter
→ 2^6 = 64 IP-adresser totalt

Hvor mange brukbare IP-er får du?
Trekk fra 2: én til nettverksadresse, én til broadcast
→ 64 - 2 = 62 brukbare IP-adresser

Hvilken nettmaske tilsvarer /26?
De første 3 oktettene er 255 (8+8+8 = 24 biter), så vi trenger 2 biter til i den siste:
11000000 = 192
→ Nettmaske: 255.255.255.192

🔁 Oppsummert:

### CIDR-tabell

| CIDR (/x) | Host-biter | Antall IP-er | Brukbare | Nettmaske         |
|----------|-------------|--------------|----------|-------------------|
| /24      | 8           | 256          | 254      | 255.255.255.0     |
| /25      | 7           | 128          | 126      | 255.255.255.128   |
| /26      | 6           | 64           | 62       | 255.255.255.192   |
| /27      | 5           | 32           | 30       | 255.255.255.224   |
| /28      | 4           | 16           | 14       | 255.255.255.240   |
| /29      | 3           | 8            | 6        | 255.255.255.248   |


🧠 Hva er en IP-adresse?
IP-adressen er en logisk adresse som identifiserer en enhet på et nettverk, uansett hvor den er i verden.

Brukes på nettverkslaget (Layer 3).

En IP-adresse er unikt identifiserende innenfor et nettverk, og kan endres (f.eks. via DHCP).

Eksempel:
Din PC kan ha IP: 192.168.1.10, mens skriveren i nettverket har 192.168.1.50.

🧠 Hva er en MAC-adresse?
MAC-adressen er en fysisk, fast adresse som brikkes inn i nettverkskortet (som et serienummer).

Brukes på lenkelaget (Layer 2).

MAC står for Media Access Control og ser typisk slik ut: 3A:1B:4F:99:AB:22.

Endres ikke uten videre (men kan “forfalskes” eller “spoofes”).

🧩 Hvordan jobber IP og MAC sammen?
De jobber i to lag, og kommuniserer via ARP (Address Resolution Protocol):

🌐 1. Du vil sende data til 192.168.1.50
Din maskin vet bare IP-en, men trenger MAC-adressen for å sende rammen fysisk.

Den sender ut en ARP-forespørsel: "Hvem har IP 192.168.1.50?"

Svar kommer: "Jeg (MAC AA:BB:CC:DD:EE:FF) har den IP-en!"

Din maskin lagrer IP–MAC-par i ARP-tabellen og sender data.

📦 Det som skjer:

IP-adressen brukes for logisk ruting.

MAC-adressen brukes for fysisk levering i lokalnettet.
📬 Utvidet scenario: Du sender en e-post til Gmail
🖥️ Din PC har:
IP: 192.168.1.100

MAC: AA:AA:AA:AA:AA:AA

📡 Din lokale ruter har:
IP internt: 192.168.1.1, MAC: BB:BB:BB:BB:BB:BB

IP eksternt (mot internett): 203.0.113.2, MAC: CC:CC:CC:CC:CC:CC

📬 Gmail-server:
IP: 172.217.3.110

📦 Hva skjer når du trykker “Send”?
🔽 1. PC-en lager pakken
IP-pakke: Fra 192.168.1.100 → 172.217.3.110

Transport: SMTP-data over TCP

Lenkelag: trenger MAC-adresse til neste hopp

🔍 Men IP-en til Gmail er utenfor lokalnett, så: → PC-en sender den til default gateway = ruteren

PC gjør ARP og finner MAC-en til ruteren: BB:BB:BB:BB:BB:BB
📦 Ethernet-ramme blir:

MAC-destinasjon: BB:BB:BB:BB:BB:BB (ruterens MAC)
MAC-avsender: AA:AA:AA:AA:AA:AA
IP-destinasjon: 172.217.3.110
IP-avsender: 192.168.1.100
🔽 2. Ruter mottar rammen og åpner den
Den ser på IP-destinasjonen: 172.217.3.110

Vet: «Dette må jeg sende videre til ISP»

Den fjerner MAC-headeren og lager en ny Ethernet-ramme

🔁 3. Ny MAC-header – nytt hopp
La oss si ruteren sender pakken til neste ruter hos ISP:

Neste hopp IP: 203.0.113.1

Ruter gjør ARP → får MAC: DD:DD:DD:DD:DD:DD

📦 Ny ramme:

MAC-destinasjon: DD:DD:DD:DD:DD:DD
MAC-avsender: CC:CC:CC:CC:CC:CC
IP-destinasjon: 172.217.3.110
IP-avsender: 192.168.1.100
✅ Legg merke til:

MAC-adresser endres på hvert hopp (nytt lenkelag)

IP-adresser forblir de samme hele veien

🔁 4. Gjentas på hvert hopp i nettet

På hvert ledd i internett-rutingen skjer:

Ruteren mottar IP-pakken

Leser IP-header: “Hvor skal den?”

Finner neste ruter i rutetabellen

Gjør nytt ARP (eller bruker MAC-cache)

Pakker inn i ny ramme med ny MAC-destinasjon

Sender videre

🧠 Når når pakken Gmail?
Siste ruter i Google sitt nettverk:

Har IP og MAC til Gmail-serveren

Gjør siste ARP for MAC til 172.217.3.110

Sender rammen til serverens nettverkskort

🎯 Hovedpoeng:

Hva skjer?
Nettverkslaget - 	IP-adressene forblir uendret fra avsender til mottaker
Lenkelaget	- MAC-adressene endres for hvert hopp (hver ruter eller node)
ARP	- Brukes lokalt for å finne MAC til neste hopp

🧩 Virkelighetseksempel:
Tenk på det som å sende et brev via post:

IP-adressen er den endelige adressen på konvolutten

MAC-adressen er leveringsadressen til hvert postkontor underveis

Brevet (IP-pakken) ligger inni konvolutten (Ethernet-rammen), som pakkes om hver gang det sendes videre




🎯 Hva er nettmaskens rolle?
Nettmasken avgjør:
* Nettmasken (subnet mask) har en helt sentral rolle i hvordan nettverk fungerer – spesielt på nettverkslaget (Layer 3) med IP-adresser.

Her kommer en enkel og konkret forklaring:

Hvilken del av IP-adressen som er nettverksadresse

Hvilken del som kan brukes til enheter (hoster)

Den skiller IP-adressen i:

🧭 Nettverksdelen (hvor du er)

🖥 Hostdelen (hvilken enhet du er)

🧠 Eksempel:
IP: 192.168.1.10
Nettmaske: 255.255.255.0 (som er det samme som /24)
I binært ser det slik ut:


IP:        11000000.10101000.00000001.00001010
Nettmaske: 11111111.11111111.11111111.00000000
🔹 De første 24 bitene (1-ere i nettmasken) er nettverksdelen → 192.168.1.0
🔸 De siste 8 bitene (0-ene) er hostdelen → identifiserer maskinen i nettverket

🔗 Hvorfor er dette viktig?
Rutere bruker nettmasken til å vite om en IP-adresse er lokal eller må sendes ut av nettverket

Den hjelper også med å dele nettverket i mindre subnett

Bestemmer hvor mange IP-adresser som er tilgjengelig i nettverket

📦 Eksempel på praktisk bruk:
Du har en IP: 10.0.0.5/24
→ Nettmaske: 255.255.255.0
→ Dette betyr at 10.0.0.0 er nettverket
→ Du kan ha adresser fra 10.0.0.1 til 10.0.0.254
→ 10.0.0.255 er broadcast




🟡 Kollisjonsdomener (✅ Forklaring på lærerens inndeling):

Nr.	Forklaring
1.	Huben + alle tilkoblede enheter = 1 felles domene
2.	Svitsj–ruter-forbindelse = 1 domene
3.	Server 1 = egen port på svitsj
4.	Server 2 = egen port på svitsj
5.	Server 3 = egen port på svitsj
6.	Server 4 = egen port på svitsj
✅ Totalt: 6 kollisjonsdomener

🔵 Hvorfor ikke 7?
Fordi hub–ruter-linken ikke telles som et separat domene – hele huben med alt den er koblet til, inkludert linken til ruteren, regnes som ett kollisjonsdomene.

📌 Dette gir mening fordi:

Hub videresender alt til alle porter

Ruteren sin port til huben deler det samme kollisjonsdomenet

Det er ikke dedikert trafikkflyt, slik det er på svitsjporter


🔐 Hva er QUIC?
QUIC (Quick UDP Internet Connections) er en nyere transportprotokoll utviklet av Google, som kombinerer fordelene ved TCP, TLS og HTTP/2, men bygger på UDP for å levere data raskere og mer robust over ustabile nett som f.eks. WiFi.

📌 Hovedtrekk og fordeler:
Basert på UDP
QUIC bruker UDP i stedet for TCP, slik at det kan implementeres uten endringer i operativsystemets kjerne. Dette gir mer fleksibilitet.

Unngår «head-of-line blocking»
I TCP blir alt forsinket hvis én pakke går tapt. Med QUIC får hver datastrøm sin egen uavhengige pakkeoverføring. Det betyr at hvis én pakke går tapt (f.eks. bilde 3), kan resten (bilde 1, 2, 4, 5…) vises uten å vente​transport-tcp.

Kryptering er innebygd fra start
Mens TLS i TCP først starter etter en full treveis håndtrykk, setter QUIC opp både forbindelse og kryptering samtidig. Det betyr raskere oppstart og bedre sikkerhet​opg04-løsning.

Kortere ventetid (latency)
QUIC gjør at websider lastes raskere fordi den eliminerer flere runder med handshakes. Én "round trip" er nok for å komme i gang.

Brukes i HTTP/3
HTTP/3 bygger på QUIC. Mange moderne nettlesere (Chrome, Firefox) og nettsteder (Google, YouTube) støtter allerede dette​transport-tcp.

📡 Når bruker vi rutere?
En ruter brukes når du skal koble sammen forskjellige nettverk – f.eks.:

Kobler lokalnett (LAN) til Internett

Kobler sammen flere subnett/VLAN

Finner beste vei til en annen IP-adresse (via ruting)

Har ofte brannmur, NAT, DHCP og WiFi innebygd

✅ Ruter jobber på Nettverkslaget (Layer 3)
✅ Rutere leser IP-adresser og avgjør hvor pakken skal sendes videre

🔀 Når bruker vi svitsjer?
En svitsj brukes når du vil koble sammen flere enheter i samme nettverk – f.eks.:

Koble sammen PC-er, skrivere og servere i ett LAN

Sørge for at data går direkte fra én enhet til en annen

Unngå kollisjoner (hver port = eget kollisjonsdomene)

Også støtte VLAN (avanserte svitsjer)

✅ Svitsj jobber på Lenkelaget (Layer 2)
✅ Svitsjer bruker MAC-adresser for å sende rammer til riktig port

🤔 Er svitsj en underkomponent av ruter?
🟥 Nei – ikke direkte.
En svitsj er ikke en del av ruteren, men:

✅ Mange hjemmerutere inneholder en innebygd svitsj, så det kan se ut som det samme.

📦 Eksempel:

Hjemmeruteren din fra Altibox eller Telenor har ofte:

WAN-port (til internett)

Flere LAN-porter (det er en innebygd svitsj)

🧩 Enkelt bilde:
Svitsj = etasjen i bygget

Ruter = dørvakten til hele bygningen

🌐 Hva står WAN for?
WAN = Wide Area Network
→ Et stort nettverk som dekker et bredt geografisk område – som Internett eller nettverk mellom byer/land.

🧠 Hva er en WAN-port?
En WAN-port på ruteren er porten der du kobler til Internett – altså til modemet eller til leverandørens nett (f.eks. Altibox, Telenor).

WAN-porten har en offentlig IP-adresse

Den er grensesnittet mellom ditt lokale nettverk (LAN) og omverdenen (Internett/WAN)

📦 Eksempel:
På en hjemmeruter ser du kanskje:

🔵 WAN-port: 1 stk (kobles til internett)

🟢 LAN-porter: 4 stk (kobles til PC, printer, TV osv.)




**"SVITSJ HVIS DU KAN, RUT NÅR DU MÅ"**

…er en tommelfingerregel som betyr:

✅ Bruk svitsj (Layer 2) så langt det lar seg gjøre
Det er raskere, billigere, og mindre ressurskrevende

Svitsjer viderekobler data internt i et lokalnett ved hjelp av MAC-adresser

De krever lite prosessering, og data går direkte fra port til port

Bruk svitsj til intern trafikk i samme nettverk/VLAN
F.eks.: PC ↔ printer, PC ↔ server

🚦 Bruk ruter (Layer 3) kun når du må
Når data skal ut av subnettet, til et annet nettverk eller internett

Ruting krever at ruteren leser og vurderer IP-adresser, bruker rutetabeller og avgjør neste hopp

Det er mer komplekst og ressurskrevende

Bruk ruter når du må krysse subnett, VLAN, eller gå ut på Internett

🧠 Enkelt sagt:
✅ Svitsj = rask og enkel trafikkstyring innenfor nettverket

🟥 Ruter = tregere, men nødvendig når du skal ut av nettverket

📦 Eksempel fra virkeligheten:
PC1 og PC2 er i samme VLAN → svitsj holder

PC1 skal kontakte en webserver på internett → må via ruter

🔁 Gateway – kort forklart
En gateway brukes når to nettverk med ulike protokoller på lag 3 eller høyere skal kommunisere. Den oversetter og tilpasser data slik at systemer med forskjellig teknologi (f.eks. IP og IPX, eller IP og telefonnett) kan utveksle informasjon.

📦 Eksempler:

IP-telefoni koblet til vanlig telenett

IP-nett koblet til gammelt Novell-nettverk med IPX

🧠 Merk:
Folk sier ofte "gateway" når de mener "ruter", men en ekte gateway gjør mer – den oversetter protokoller, ikke bare videresender pakker.

🧠 Min forklaring:
Tenk på gateway som en tolk mellom to språk: Den oversetter det én snakker til noe den andre forstår – men bare det begge faktisk har til felles kan oversettes helt korrekt.
